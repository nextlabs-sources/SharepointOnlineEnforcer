#!/bin/bash
#
# DESCRIPTION
#	Invoke release build
#
# USAGE:
#	Steps to invoke this script.
#		export NLEXTERNALDIR=<path>
#		export BUILD_NUMBER=<#>
#		source setEnv
#		./buildRelease
#
# HUDSON BUILD:
#	cd $WORKSPACE
#	export NLEXTERNALDIR=c:/hudson/jobs/external_latest/workspace
#	source setEnv
#	./buildRelease
#
# Build Options:
#	make -f build/Makefile.compile || exit $?
#	make -f build/Makefile.compile compile install || exit $?
#
# Publish Options:
#	make -f build/Makefile.publish TYPE=release || exit $?
#	make -f build/Makefile.publish TYPE=release spe archive || exit $


LOG_FILE=buildRelease.log
BUILD_MANIFEST_FILE=build.manifest

(
set -x
# Extract Perforce Workspace and Hudson info (only if running on Hudson)
if [ -f ../config.xml ]; then
	build/getGitWorkspaceInfo.pl ../config.xml
fi

# Prepare environment
./configure --type=release || exit $?
source build.config

# Prepare dependencies
#make -f build/Makefile.xlib

# Compile SPOE code
make -f build/Makefile.compile compile || exit $?


##
# Let's do some code-signing for files going into the final SPOE package
# Since this is a Release build - we will be signing using the NextLabs production certificate
# Code-signing can be turned off from shell if we define a shell variable NOCODESIGN
##
NOCODESIGN=1
if [ "X${NOCODESIGN}" = "X"  ] ; then
	# Check for the availability of the NextLabs certificate
	if [ -f "C:/release/bin/NextLabs.pfx" ] ; then
		export NEXTLABS_CERT_FILE="c:/release/bin/NextLabs.pfx"
	else
		echo "ERROR: Unable to find NextLabs.pfx certificate for code-signing. If you want to turn off code-signing, define a shell variable NOCODESIGN."
		exit -1
	fi

	# Check for the availability of the Microsoft cross-cert
	if [ -f "c:/release/bin/MSCV-VSClass3.cer" ] ; then
		export MSCV_CROSS_CERT_FILE="c:/release/bin/MSCV-VSClass3.cer"
	else
		echo "ERROR: Unable to find Microsoft cross-cert required for release build code-signing. If you want to turn off code-signing, define a shell variable NOCODESIGN."
		exit -1
	fi

	# Check for the availability of Win8SDK's signtool
	if [ -f "C:/PROGRA~2/Windows Kits/8.0/bin/x64/signtool.exe" ] ; then
		SIGNTOOL_OFFICIAL_TOOL="C:/PROGRA~2/Windows Kits/8.0/bin/x64/signtool.exe"
	else
		echo "ERROR: Unable to find signtool command required for code-signing. If you want to turn off code-signing, define a shell variable NOCODESIGN."
		exit -1
	fi

	##
	# Find all signable files and send them for signing
	# Currently supported formats: exe, dll
	##
	cd ${WORKSPACE}
	"${SIGNTOOL_OFFICIAL_TOOL}" sign \
		/ac "${MSCV_CROSS_CERT_FILE}" \
		/f "${NEXTLABS_CERT_FILE}" \
		/p IiVf1itvOrqJ \
		/n 'NextLabs, Inc.' \
		/t http://timestamp.verisign.com/scripts/timestamp.dll \
		/fd sha256 \
		`find ${PWD}/bin -type f | egrep -e '\.(exe|dll)$' | xargs cygpath --mixed`
	#
fi

cd ${WORKSPACE}/

# Create SPOE installer
make -f build/Makefile.compile install || exit $?

# Publish packages and artifacts to BODA only if PUBLISH_TO_BODA environment variable is set
if [ "X${PUBLISH_TO_BODA}" = "XYes" -o "X${PUBLISH_TO_BODA}" = "Xyes" -o "X${PUBLISH_TO_BODA}" = "XYES" -o "X${PUBLISH_TO_BODA}" = "X1" ]
then
	# Publish installers and artifacts
	make -f build/Makefile.publish TYPE=release || exit $?
fi

# Create and publish build manifest
build/createBuildManifest.pl $LOG_FILE > $BUILD_MANIFEST_FILE || exit $?
# Publish packages and artifacts to BODA only if PUBLISH_TO_BODA environment variable is set
if [ "X${PUBLISH_TO_BODA}" = "XYes" -o "X${PUBLISH_TO_BODA}" = "Xyes" -o "X${PUBLISH_TO_BODA}" = "XYES" -o "X${PUBLISH_TO_BODA}" = "X1" ]
then
	make -f build/Makefile.publish TYPE=release manifest || exit $?
fi

set +x

echo
echo
echo "####################### BUILD MANIFEST CONTENTS ########################"
cat ${WORKSPACE}/${BUILD_MANIFEST_FILE}
echo "########################################################################"
) 2>&1 | tee $LOG_FILE

exit ${PIPESTATUS[0]}
